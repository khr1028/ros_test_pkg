/*
 * Copyright (c) 2016, Thomas Keh
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *    3. Neither the name of the copyright holder nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

namespace kaco {

// begin doxygen
/**

\page examples Examples

\example examples/core.cpp

	This example shows how to use the KaCanOpen Core library.

	It starts the node via NMT, gets and sets values via SDO and determines
	device type and device name.

\example examples/master.cpp

	This example shows how to use the KaCanOpen Master library.

	It waits for a device with a specific ID, loads a dictionary from the EDS library and reads and writes various dictionary entries
	like mandatory and optional CiA-301 entries. If possible, it controls a CiA-402 motor or it handles digital I/Os of a CiA-401
	I/O device. Furthermore it shows how to use profile-specific operations and constants.

\example examples/listdevices.cpp

	This example lists all connected devices and prints their manufacturer device name.

\example examples/pdo.cpp
	
	This example runs a counter completely without SDO transfers.

	There must be a CiA 401 device which is configured to send 'Read input 8-bit/Digital Inputs 1-8'
	and 'Read input 8-bit/Digital Inputs 9-16' via TPDO1 and to receive 'Write output 8-bit/Digital Outputs 1-8' via RPDO1.

\example examples/ros/motor_and_io_bridge.cpp

	This example publishes and subscribes JointState messages for each connected CiA 402 device as well as
	uint8 messages for each connected digital IO device (CiA 401).

\example examples/ros/ros.cpp

	This example shows how to use the ROS bridge which in this case subscribes and
	publishes topics to get and set digital input/output of a CiA 401 device.

	It requires that you have plugged in a CiA 401 device with 16 digital outputs
	and 8 digital inputs.

\example examples/test/eds_library.cpp

	Just for testing purposes: This example loads dictionaries from the EDS library.

\example examples/test/eds_reader.cpp

	Just for testing purposes: This example reads an EDS file and prints the resulting dictionary.

*/
// end doxygen

} // end namespace kado



